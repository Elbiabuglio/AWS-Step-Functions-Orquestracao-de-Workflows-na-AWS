# Conceitos Fundamentais - AWS Step Functions

## üß† Introdu√ß√£o aos Conceitos Core

### O que s√£o State Machines (M√°quinas de Estado)?

Uma **m√°quina de estado** √© um modelo computacional que define um sistema atrav√©s de:
- **Estados** finitos e bem definidos
- **Transi√ß√µes** entre estados baseadas em eventos ou condi√ß√µes
- **Dados** que fluem atrav√©s dos estados

### Amazon States Language (ASL)

O ASL √© uma linguagem JSON declarativa usada para definir m√°quinas de estado. Elementos principais:

```json
{
  "Comment": "Descri√ß√£o opcional da m√°quina de estado",
  "StartAt": "PrimeiroEstado",
  "States": {
    "PrimeiroEstado": {
      "Type": "TipoDoEstado",
      // Configura√ß√µes espec√≠ficas do estado
    }
  }
}
```

## üìã Tipos de Estados Detalhados

### 1. Task State
Executa uma unidade de trabalho espec√≠fica.

```json
{
  "ProcessOrder": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessOrder",
    "TimeoutSeconds": 300,
    "HeartbeatSeconds": 60,
    "Next": "CheckResult",
    "Retry": [
      {
        "ErrorEquals": ["Lambda.ServiceException"],
        "IntervalSeconds": 2,
        "MaxAttempts": 6,
        "BackoffRate": 2.0
      }
    ],
    "Catch": [
      {
        "ErrorEquals": ["States.TaskFailed"],
        "Next": "HandleError",
        "ResultPath": "$.error"
      }
    ]
  }
}
```

**Par√¢metros importantes:**
- `Resource`: ARN do recurso a ser executado
- `TimeoutSeconds`: Timeout total da tarefa
- `HeartbeatSeconds`: Intervalo m√°ximo entre heartbeats
- `Retry`: Configura√ß√£o de tentativas autom√°ticas
- `Catch`: Tratamento de erros

### 2. Choice State
Implementa l√≥gica condicional (if/else).

```json
{
  "CheckAge": {
    "Type": "Choice",
    "Choices": [
      {
        "Variable": "$.age",
        "NumericGreaterThanEquals": 18,
        "Next": "AdultProcess"
      },
      {
        "Variable": "$.age",
        "NumericLessThan": 18,
        "Next": "MinorProcess"
      }
    ],
    "Default": "ErrorState"
  }
}
```

**Operadores de compara√ß√£o:**
- `StringEquals`, `StringLessThan`, `StringGreaterThan`
- `NumericEquals`, `NumericLessThan`, `NumericGreaterThan`
- `BooleanEquals`
- `TimestampEquals`, `TimestampLessThan`, `TimestampGreaterThan`
- `IsNull`, `IsPresent`, `IsNumeric`, `IsString`, `IsBoolean`, `IsTimestamp`

### 3. Wait State
Pausa a execu√ß√£o por tempo determinado.

```json
{
  "WaitForResponse": {
    "Type": "Wait",
    "Seconds": 10,
    "Next": "CheckResponse"
  },
  "WaitUntilTimestamp": {
    "Type": "Wait",
    "Timestamp": "2024-12-25T00:00:00Z",
    "Next": "ChristmasProcess"
  },
  "WaitFromInput": {
    "Type": "Wait",
    "SecondsPath": "$.waitTime",
    "Next": "ContinueProcess"
  }
}
```

### 4. Parallel State
Executa branches paralelos.

```json
{
  "ProcessInParallel": {
    "Type": "Parallel",
    "Branches": [
      {
        "StartAt": "ProcessImages",
        "States": {
          "ProcessImages": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessImages",
            "End": true
          }
        }
      },
      {
        "StartAt": "ProcessText",
        "States": {
          "ProcessText": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessText",
            "End": true
          }
        }
      }
    ],
    "Next": "CombineResults"
  }
}
```

### 5. Map State
Itera sobre uma cole√ß√£o de itens.

```json
{
  "ProcessItems": {
    "Type": "Map",
    "ItemsPath": "$.items",
    "MaxConcurrency": 10,
    "Iterator": {
      "StartAt": "ProcessSingleItem",
      "States": {
        "ProcessSingleItem": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessItem",
          "End": true
        }
      }
    },
    "Next": "AllItemsProcessed"
  }
}
```

### 6. Pass State
Passa ou transforma dados sem executar trabalho.

```json
{
  "SetDefaults": {
    "Type": "Pass",
    "Parameters": {
      "status": "processing",
      "timestamp.$": "$$.State.EnteredTime",
      "originalInput.$": "$"
    },
    "Next": "ProcessData"
  }
}
```

### 7. Fail State
Termina execu√ß√£o com erro.

```json
{
  "ValidationError": {
    "Type": "Fail",
    "Error": "ValidationError",
    "Cause": "Input validation failed"
  }
}
```

### 8. Succeed State
Termina execu√ß√£o com sucesso.

```json
{
  "Success": {
    "Type": "Succeed"
  }
}
```

## üîÑ Manipula√ß√£o de Dados

### InputPath, OutputPath e ResultPath

```json
{
  "ProcessData": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:Process",
    "InputPath": "$.data",           // Passa apenas $.data como input
    "OutputPath": "$.result",        // Retorna apenas $.result como output
    "ResultPath": "$.processResult", // Adiciona resultado em $.processResult
    "Next": "NextState"
  }
}
```

### Parameters e ResultPath
```json
{
  "EnhanceInput": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:Enhance",
    "Parameters": {
      "input.$": "$",
      "config": {
        "mode": "enhanced",
        "timestamp.$": "$$.State.EnteredTime"
      }
    },
    "ResultPath": "$.enhancement",
    "Next": "UseEnhancedData"
  }
}
```

## üîç Context Object
Informa√ß√µes sobre a execu√ß√£o atual dispon√≠veis via `$$`.

```json
{
  "LogExecution": {
    "Type": "Pass",
    "Parameters": {
      "executionName.$": "$$.Execution.Name",
      "stateMachineName.$": "$$.StateMachine.Name",
      "executionId.$": "$$.Execution.Id",
      "stateEnteredTime.$": "$$.State.EnteredTime",
      "stateName.$": "$$.State.Name"
    },
    "Next": "ContinueWorkflow"
  }
}
```

## ‚ö†Ô∏è Error Handling

### Retry Configuration
```json
{
  "Retry": [
    {
      "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
      "IntervalSeconds": 2,
      "MaxAttempts": 6,
      "BackoffRate": 2.0
    },
    {
      "ErrorEquals": ["States.TaskFailed"],
      "IntervalSeconds": 1,
      "MaxAttempts": 3
    }
  ]
}
```

### Catch Configuration
```json
{
  "Catch": [
    {
      "ErrorEquals": ["CustomError.ValidationFailed"],
      "Next": "HandleValidationError",
      "ResultPath": "$.error"
    },
    {
      "ErrorEquals": ["States.ALL"],
      "Next": "HandleGenericError",
      "ResultPath": "$.error"
    }
  ]
}
```

### Predefined Error Codes
- `States.ALL` - Captura todos os erros
- `States.TaskFailed` - Falha na execu√ß√£o da tarefa
- `States.Timeout` - Timeout da tarefa
- `States.ExecutionLimitExceeded` - Limite de execu√ß√£o excedido
- `States.HeartbeatTimeout` - Timeout de heartbeat

## üéØ Padr√µes Comuns

### 1. Try-Catch Pattern
```json
{
  "TryOperation": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:RiskyOperation",
    "Catch": [
      {
        "ErrorEquals": ["States.ALL"],
        "Next": "HandleError"
      }
    ],
    "Next": "Success"
  },
  "HandleError": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ErrorHandler",
    "End": true
  },
  "Success": {
    "Type": "Succeed"
  }
}
```

### 2. Saga Pattern (Compensating Actions)
```json
{
  "ProcessPayment": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessPayment",
    "Catch": [
      {
        "ErrorEquals": ["PaymentError"],
        "Next": "CompensatePayment"
      }
    ],
    "Next": "UpdateInventory"
  },
  "CompensatePayment": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:RefundPayment",
    "End": true
  }
}
```

### 3. Circuit Breaker Pattern
```json
{
  "CheckCircuitBreaker": {
    "Type": "Choice",
    "Choices": [
      {
        "Variable": "$.circuitBreakerOpen",
        "BooleanEquals": true,
        "Next": "CircuitBreakerOpen"
      }
    ],
    "Default": "CallService"
  },
  "CallService": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:CallExternalService",
    "Catch": [
      {
        "ErrorEquals": ["ServiceUnavailable"],
        "Next": "OpenCircuitBreaker"
      }
    ],
    "Next": "Success"
  }
}
```

## üìä Limites e Considera√ß√µes

### Standard Workflows
- **Payload m√°ximo**: 256 KB
- **Execu√ß√£o m√°xima**: 1 ano
- **Estados m√°ximos**: 25.000 eventos por execu√ß√£o
- **Taxa de execu√ß√£o**: 2.000 por segundo

### Express Workflows
- **Payload m√°ximo**: 256 KB
- **Execu√ß√£o m√°xima**: 5 minutos
- **Taxa de execu√ß√£o**: 100.000+ por segundo
- **Hist√≥rico**: Limitado (CloudWatch Logs)

## üîß Dicas de Debugging

### 1. Use Pass States para Debug
```json
{
  "DebugInput": {
    "Type": "Pass",
    "Parameters": {
      "debug": "Current state input",
      "input.$": "$",
      "context.$": "$$"
    },
    "Next": "ActualProcessing"
  }
}
```

### 2. Logging Estruturado
```json
{
  "LogState": {
    "Type": "Task",
    "Resource": "arn:aws:lambda:us-east-1:123456789012:function:Logger",
    "Parameters": {
      "level": "INFO",
      "message": "Processing item",
      "data.$": "$",
      "executionId.$": "$$.Execution.Id"
    },
    "ResultPath": null,
    "Next": "ContinueWorkflow"
  }
}
```

## üéì Pr√≥ximos Passos

1. **Explore integra√ß√µes**: Aprenda sobre SDK integra√ß√µes
2. **Pratique padr√µes**: Implemente padr√µes comuns
3. **Otimize custos**: Entenda o modelo de pricing
4. **Monitor**: Configure alertas e dashboards
5. **Teste**: Use Step Functions Local para desenvolvimento

---

Este documento cobre os conceitos fundamentais. Para casos espec√≠ficos, consulte os exemplos pr√°ticos na pasta `/examples/`.